" Plugin Directory
call plug#begin('~/.local/share/nvim/plugged')

" Always loaded plugins
Plug 'ciaranm/securemodelines'
Plug 'editorconfig/editorconfig-vim'
Plug 'justinmk/vim-sneak'
Plug 'machakann/vim-highlightedyank'
Plug 'andymass/vim-matchup'

Plug 'vim-airline/vim-airline'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug 'luochen1990/rainbow'
Plug 'matze/vim-move'
Plug 'scrooloose/nerdcommenter'

" NERDTree
nmap <C-n> :NERDTreeToggle<CR>
let g:NERDTreeGitStatusWithFlags = 1
let g:NERDTreeIgnore = ['^node_modules$']

" Theme
Plug 'chriskempson/base16-vim'

" language specific Plugins
"
" Go
Plug 'fatih/vim-go', { 'for': 'go' }

" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" Elxiir
Plug 'elixir-editors/vim-elixir', {'for': 'elixir'}

" Typescript
Plug 'leafgarland/typescript-vim', { 'for': ['typescript', 'typescriptreact'] }
Plug 'peitalin/vim-jsx-typescript', { 'for': ['javascriptreact', 'typescriptreact'] }

" sql
Plug 'lifepillar/pgsql.vim', { 'for': 'sql' }

"sh
Plug 'sbdchd/neoformat', {'for': ['sql', 'sh'] }
call plug#end()

" use vim-move to move lines up or down using <S-J> and <S-K>
let g:move_key_modifier = 'S'

" set fzf directory
set rtp+=/usr/local/opt/fzf

" does not launch vi
set nocompatible
" colors for theme
set termguicolors
" set theme
colorscheme base16-gruvbox-dark-hard
" syntax highlighting
syntax on
" Make backspace work
set backspace=2
set shiftwidth=2
set tabstop=2
set expandtab
set autoindent
set smartindent
" set relative line numbers and absolute
set number
set relativenumber
set clipboard=unnamed
" allow folding by language
set foldenable
set foldmethod=syntax
set foldlevelstart=99

filetype plugin indent on

" neoformat format on save
if &filetype ==# 'sql' || &filetype ==# 'sh'
  augroup fmt
    autocmd!
    autocmd BufWritePre * undojoin | Neoformat
  augroup END
endif

" move lines up or down with <S-K and S-J> in non-insert mode
" nnoremap <S-K> :m-2<CR>==
" nnoremap <S-J> :m+<CR>==

let g:clj_fmt_autosave = 1

" syntax highlight sql files
let g:sql_type_default = 'pgsql'

" shfmt configuration
let g:shfmt_opt = '-i 2'

" rainbow parens in vim
let g:rainbow_active = 1

" keybinds
let mapleader=","

" map for file search
nnoremap <leader><tab> :Files<Cr>
nnoremap <leader><leader> :Rg<Cr>

nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

" omnicompletion : words
inoremap ]] <C-x><C-o>

" creates a new vertical split with <leader>`
nnoremap <leader>` <C-W>v

nnoremap <leader>r <C-W><C-H>
nnoremap <leader>t <C-W><C-L>

" omnicompletion : filepaths
inoremap <leader>- <C-x><C-f>

" omnicompletion : lines
inoremap <leader>= <C-x><C-l>

" go back to previous buffer
nnoremap <leader><b> :b#<cr>

" run prettier on save
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
augroup ProjectDrawer
  autocmd!
augroup END

" ale
let g:ale_linters_explicit = 1
let g:ale_linters = {
\ 'rust': ['cargo'],
\ 'c': ['clang'],
\ 'cpp': ['clang++'],
\  'ruby': ['rubocop'],
\ 'javascript': ['eslint'],
\ 'typescript': ['tsserver'],
\ 'jsx': ['eslint'],
\ 'tsx': ['eslint'],
\}
let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'rust': ['rustfmt'],
\  'c': ['clang-format'],
\  'cpp': ['clang-format'],
\  'ruby': ['rubocop'],
\  'javascript': ['prettier'],
\  'typescript': ['prettier'],
\  'jsx': ['prettier'],
\  'tsx': ['prettier'],
\  'scss': ['prettier'],
\  'html': ['prettier'],
\}

let g:ale_c_gcc_options = '-Wall -Werror -Wextra -std=c11'
let g:ale_cpp_gcc_options = '-Wall -Werror -Wextra -std=c++20 -fconcepts'

let g:ale_c_clang_options = '-Wall -Werror -Wextra -std=c11'
let g:ale_cpp_clang_options = '-Wall -Werror -Wextra -std=c++20'

let g:ale_fix_on_save = 1

let g:fmt_autosave = 1

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" Set spelling on for text, txt and md files
autocmd BufRead,BufNewFile *.txt setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.tex setlocal spell

set complete+=kspell

" CoC
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
